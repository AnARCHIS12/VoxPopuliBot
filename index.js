const { Client, GatewayIntentBits, EmbedBuilder, REST, Routes } = require('discord.js');
const fs = require('fs');
const cron = require('node-cron');
const express = require('express');
const app = express();

// Initialize Discord client with necessary intents
const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMembers  // Ajout de l'intent pour les membres
    ]
});

const token = process.env.TOKEN;
const clientId = process.env.CLIENT_ID;
const PORT = process.env.PORT || 3000;

// Configuration du serveur Express
app.get('/', (req, res) => {
    res.send('Bot is running!');
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

// Fonction pour cr√©er l'embed des r√®gles
function createRulesEmbed() {
    return new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('üè¥ **MANIFESTE DE LA COMMUNE NUM√âRIQUE AUTOG√âR√âE** ‚öîÔ∏è')
        .setDescription(`
            \`\`\`diff
            + PRINCIPES FONDAMENTAUX DE NOTRE COLLECTIF R√âVOLUTIONNAIRE
            \`\`\`
            
            üî• **1. LIBERT√â ABSOLUE ET R√âSISTANCE**
            L'expression libre est notre arme contre l'oppression. Aucune hi√©rarchie ne sera tol√©r√©e.
            
            ‚öíÔ∏è **2. SOLIDARIT√â PROL√âTARIENNE**
            Unis dans la lutte, nous sommes la force du changement. Le soutien mutuel est notre fondation.
            
            ‚≠ê **3. D√âMOCRATIE DIRECTE**
            Le pouvoir au peuple! Chaque camarade a une voix √©gale dans notre commune digitale.
            
            üõ°Ô∏è **4. S√âCURIT√â COLLECTIVE**
            Protection mutuelle des donn√©es et de la vie priv√©e contre la surveillance capitaliste.
            
            ‚úä **5. ACTION DIRECTE**
            Participation active dans la lutte pour un monde meilleur. L'inaction est complice du syst√®me.
            
            üïäÔ∏è **6. R√âSISTANCE NON-VIOLENTE**
            Notre force est dans l'unit√© et l'intelligence collective, pas dans la violence physique.
            
            üìö **7. √âDUCATION R√âVOLUTIONNAIRE**
            Le savoir est une arme. Partageons-le librement, brisons les cha√Ænes de l'ignorance.
            
            üåê **8. AUTOGESTION NUM√âRIQUE**
            Nous sommes les architectes de notre propre espace virtuel lib√©r√©.
            
            üé® **9. CR√âATIVIT√â SUBVERSIVE**
            L'art et l'innovation comme outils de r√©sistance et de changement social.
            
            ‚ö° **10. R√âVOLUTION PERMANENTE**
            La lutte continue jusqu'√† la lib√©ration totale de l'humanit√©.
            
            \`\`\`diff
            - CONTRE L'√âTAT, LE CAPITAL ET TOUTE FORME D'OPPRESSION
            + POUR L'√âMANCIPATION TOTALE ET LA LIBERT√â COLLECTIVE
            \`\`\`
        `)
        .setImage('https://cdn.discordapp.com/attachments/1330606622887645304/1330613413528862761/UNION_ANARCHISTE2.png?ex=678e9dcf&is=678d4c4f&hm=b43747d7fd7941b9d3438ff424b454b3f291f9e36c452d18b6e0849f22fda08b&')
        .setFooter({ 
            text: '‚úä NO PASARAN! La r√©volution sera num√©rique ou ne sera pas! ‚úä', 
            iconURL: 'https://cdn.discordapp.com/attachments/1330606622887645304/1330613413528862761/UNION_ANARCHISTE2.png?ex=678e9dcf&is=678d4c4f&hm=b43747d7fd7941b9d3438ff424b454b3f291f9e36c452d18b6e0849f22fda08b&' 
        })
        .setTimestamp();
}

// Fonction pour cr√©er l'embed des d√©bats
function createDebateEmbed(sujet) {
    return new EmbedBuilder()
        .setColor('#FF4500')
        .setTitle('üí≠ **DIALECTIQUE R√âVOLUTIONNAIRE** üó£Ô∏è')
        .setDescription(`
            \`\`\`diff
            + D√âBAT DU JOUR : CONSCIENCE DE CLASSE ET R√âFLEXION COLLECTIVE
            \`\`\`

            ‚öîÔ∏è **SUJET DE DISCUSSION :**
            ${sujet}

            \`\`\`md
            # DIRECTIVES POUR UN D√âBAT CONSTRUCTIF
            \`\`\`

            üéØ **OBJECTIF**
            D√©velopper notre conscience collective et affiner notre analyse r√©volutionnaire

            üîÑ **M√âTHODE DIALECTIQUE**
            1. Th√®se ‚ûú Exposez vos arguments
            2. Antith√®se ‚ûú Confrontez les perspectives
            3. Synth√®se ‚ûú Construisons ensemble

            ‚ö° **R√àGLES D'ENGAGEMENT**
            ‚Ä¢ Argumentez avec rigueur et respect
            ‚Ä¢ Citez vos sources th√©oriques
            ‚Ä¢ Liez th√©orie et pratique
            ‚Ä¢ Pensez collectivement

            \`\`\`diff
            - CONTRE LA PENS√âE UNIQUE CAPITALISTE
            + POUR UNE R√âFLEXION LIBRE ET R√âVOLUTIONNAIRE
            \`\`\`
        `)
        .setImage('https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/Raised_fist.svg/1200px-Raised_fist.svg.png')
        .setFooter({ 
            text: 'üè¥ La th√©orie sans action est st√©rile, l\'action sans th√©orie est aveugle! ‚öîÔ∏è',
            iconURL: 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Anarchy.svg/1024px-Anarchy.svg.png' 
        })
        .setTimestamp();
}

// Syst√®me anti-veille am√©lior√©
function keepAlive() {
    setInterval(() => {
        if (client.ws.ping > 0) {
            console.log(`Bot actif - Ping: ${client.ws.ping}ms`);
        } else {
            console.log('Reconnexion...');
            client.login(token);
        }
    }, 300000); // V√©rifie toutes les 5 minutes (300000ms)
}

// Gestion des erreurs basique
process.on('unhandledRejection', error => {
    console.error('Erreur:', error);
    client.login(token);
});

// Your existing sujetsAutomatiques array stays the same
const sujetsAutomatiques = [
    "1. La propri√©t√© collective : Est-elle la cl√© pour une soci√©t√© plus juste ?",
    "2. Le concept de lutte des classes est-il toujours pertinent au XXIe si√®cle ?",
    "3. La r√©volution prol√©tarienne : mythe ou n√©cessit√© historique ?",
    "4. L'abolition du salariat : une utopie r√©alisable ?",
    "5. Le marxisme face aux d√©fis √©cologiques contemporains",
    "6. L'autogestion ouvri√®re : alternative viable au capitalisme ?",
    "7. La dictature du prol√©tariat : concept d√©pass√© ou mal compris ?",
    "8. L'internationalisme prol√©tarien √† l'√®re de la mondialisation",
    "9. La production autog√©r√©e : exp√©riences historiques",
    "10. Le sabotage : tactique de lutte l√©gitime ?",
    "11. L'√©ducation libertaire : principes et m√©thodes",
    "12. La propri√©t√© sociale : alternative √† la propri√©t√© √©tatique ?",
    "13. Le communisme primitif : le√ßons pour aujourd'hui ?",
    "14. L'abolition du patriarcat : dimension √©conomique",
    "15. La d√©mocratie au travail : quelles formes ?",
    "16. Le socialisme du XXIe si√®cle : ruptures et continuit√©s",
    "17. L'√©conomie participative : mod√®le viable ?",
    "18. La r√©volution permanente : concept actuel ?",
    "19. L'abolition des fronti√®res : processus r√©volutionnaire ?",
    "20. Le contr√¥le populaire : m√©canismes et institutions",
    "21. La production pour l'usage : alternative au march√© ?",
    "22. L'√©cologie sociale : perspective r√©volutionnaire ?",
    "23. Le f√©d√©ralisme libertaire : organisation politique alternative ?",
    "24. La d√©colonisation mentale : pr√©alable r√©volutionnaire ?",
    "25. L'abolition du profit : cons√©quences syst√©miques",
    "26. La culture prol√©tarienne : existe-t-elle encore ?",
    "27. Le luxemburgisme aujourd'hui : quelle pertinence ?",
    "28. La commune insurrectionnelle : mod√®le d'action ?",
    "29. L'entraide : base d'une nouvelle soci√©t√© ?",
    "30. Le situationnisme : critique sociale toujours valable ?",
    "31. La propri√©t√© commune des ressources naturelles",
    "32. L'abolition du travail salari√© : √©tapes concr√®tes",
    "33. Le conseillisme : alternative au l√©ninisme ?",
    "34. La r√©volution culturelle : dimension n√©cessaire ?",
    "35. L'autonomie territoriale : base r√©volutionnaire ?",
    "36. Le communisme de guerre : le√ßons historiques",
    "37. L'abolition de la bureaucratie : m√©thodes et moyens",
    "38. La socialisation de l'art : n√©cessit√© r√©volutionnaire ?",
    "39. Le contr√¥le des prix : mesure transitoire ?",
    "40. L'autogestion g√©n√©ralis√©e : possibilit√©s concr√®tes",
    "41. La r√©volution num√©rique : opportunit√© √©mancipatrice ?",
    "42. Le municipalisme : base de reconstruction sociale ?",
    "43. L'abolition de la propri√©t√© intellectuelle : cons√©quences",
    "44. La planification d√©mocratique : m√©canismes concrets",
    "45. Le communisme anarchiste : synth√®se possible ?",
    "46. La r√©volution sociale : conditions objectives",
    "47. L'abolition de la hi√©rarchie : processus graduel ?",
    "48. Le contr√¥le ouvrier : exp√©riences historiques",
    "49. La propri√©t√© sociale : gestion d√©mocratique ?",
    "50. L'√©conomie solidaire : alternative syst√©mique ?",
    "51. La r√©volution permanente : actualisation n√©cessaire ?",
    "52. Le socialisme scientifique : concept d√©pass√© ?",
    "53. L'abolition du march√© : √©tapes transitoires",
    "54. La commune autonome : viabilit√© √©conomique ?",
    "55. Le contr√¥le populaire : institutions n√©cessaires",
    "56. L'autogestion territoriale : exp√©riences concr√®tes",
    "57. La propri√©t√© collective : modes de gestion",
    "58. L'√©conomie planifi√©e : nouveaux mod√®les",
    "59. La r√©volution digitale : potentiel √©mancipateur ?",
    "60. Le communisme municipal : alternative locale ?",
    "61. L'abolition de l'argent : soci√©t√© post-mon√©taire",
    "62. La d√©mocratie √©conomique : formes concr√®tes",
    "63. Le socialisme autogestionnaire : perspectives actuelles",
    "64. La r√©volution √©cologique : dimension anticapitaliste",
    "65. La question de la libert√© d'expression : Quels enjeux ?"
];

const CONFIG_FILE = 'config.json';
let config = { 
    debateChannelId: null, 
    pingChannelId: null,
    rulesChannelId: null  // Ajout d'un canal pour les r√®gles
};

if (fs.existsSync(CONFIG_FILE)) {
    config = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf-8'));
}

// Ajout de la commande pour configurer le canal des r√®gles
const commands = [
    {
        name: 'creerdebat',
        description: 'Cr√©e un nouveau d√©bat avec un sujet sp√©cifi√©',
        options: [
            {
                name: 'sujet',
                type: 3,
                description: 'Le sujet du d√©bat',
                required: true,
            },
            {
                name: 'canal',
                type: 7,
                description: 'Le canal o√π envoyer le d√©bat',
                required: false,
            },
        ],
    },
    {
        name: 'configurerdebats',
        description: 'Configure le salon pour les d√©bats automatiques et manuels',
        options: [
            {
                name: 'canal',
                type: 7,
                description: 'Le salon √† configurer pour les d√©bats',
                required: true,
            },
        ],
    },
    {
        name: 'configurerping',
        description: 'Configure le salon pour les pings automatiques',
        options: [
            {
                name: 'canal',
                type: 7,
                description: 'Le salon √† configurer pour les pings',
                required: true,
            },
        ],
    },
    {
        name: 'regles',
        description: 'Affiche les r√®gles du serveur',
    },
    {
        name: 'configureregles',
        description: 'Configure le salon pour l\'affichage automatique des r√®gles',
        options: [
            {
                name: 'canal',
                type: 7,
                description: 'Le salon √† configurer pour les r√®gles',
                required: true,
            },
        ],
    },
    {
        name: 'afficheregles',
        description: 'Affiche les r√®gles dans le canal actuel',
    }
];

const rest = new REST({ version: '10' }).setToken(token);

// Register slash commands
(async () => {
    try {
        console.log('Enregistrement des commandes slash globales...');
        await rest.put(Routes.applicationCommands(clientId), { body: commands });
        console.log('Les commandes slash globales ont √©t√© enregistr√©es.');
    } catch (error) {
        console.error('Erreur lors de l\'enregistrement des commandes:', error);
    }
})();

// Gestion des nouveaux membres
client.on('guildMemberAdd', async (member) => {
    try {
        // Envoie un message de bienvenue avec les r√®gles en DM
        await member.send({ 
            content: `Bienvenue sur le serveur, ${member.user.username} ! Voici nos r√®gles :`,
            embeds: [createRulesEmbed()]
        });

        // Si un canal de r√®gles est configur√©, y envoyer aussi les r√®gles
        if (config.rulesChannelId) {
            const rulesChannel = member.guild.channels.cache.get(config.rulesChannelId);
            if (rulesChannel) {
                await rulesChannel.send({
                    content: `Bienvenue ${member} ! Voici les r√®gles du serveur :`,
                    embeds: [createRulesEmbed()]
                });
            }
        }
    } catch (error) {
        console.error('Erreur lors de l\'envoi des r√®gles:', error);
    }
});

// Ready event handler
client.on('ready', () => {
    console.log(`Le bot est en ligne en tant que ${client.user.tag}`);
    
    keepAlive();
    
    client.user.setPresence({
        activities: [{ name: 'Veiller sur l\'anarchie', type: 'WATCHING' }],
        status: 'online'
    });

    // Schedule daily debate topic
    cron.schedule('0 12 * * *', async () => {
        const channel = client.channels.cache.get(config.debateChannelId);
        if (channel) {
            const sujet = sujetsAutomatiques[Math.floor(Math.random() * sujetsAutomatiques.length)];
            try {
                await channel.send({ embeds: [createDebateEmbed(sujet)] });
            } catch (error) {
                console.error('Erreur lors de l\'envoi du d√©bat:', error);
            }
        } else {
            console.error('Canal de d√©bat non configur√©.');
        }
    });
});

// Interaction handler
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;

    const { commandName } = interaction;

    if (commandName === 'regles' || commandName === 'afficheregles') {
        await interaction.reply({ embeds: [createRulesEmbed()] });
    } else if (commandName === 'creerdebat') {
        const sujet = interaction.options.getString('sujet');
        const canal = interaction.options.getChannel('canal') || interaction.channel;

        await canal.send({ embeds: [createDebateEmbed(sujet)] });
        await interaction.reply({ content: '‚úä D√©bat r√©volutionnaire lanc√© avec succ√®s! ‚öîÔ∏è', ephemeral: true });
    } else if (commandName === 'configurerdebats') {
        const canal = interaction.options.getChannel('canal');
        config.debateChannelId = canal.id;
        fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
        await interaction.reply({ content: 'Canal de d√©bats configur√© avec succ√®s !', ephemeral: true });
    } else if (commandName === 'configurerping') {
        const canal = interaction.options.getChannel('canal');
        config.pingChannelId = canal.id;
        fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
        await interaction.reply({ content: 'Canal de pings configur√© avec succ√®s !', ephemeral: true });
    } else if (commandName === 'configureregles') {
        const canal = interaction.options.getChannel('canal');
        config.rulesChannelId = canal.id;
        fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
        await interaction.reply({ content: 'Canal des r√®gles configur√© avec succ√®s !', ephemeral: true });
        
        // Affiche imm√©diatement les r√®gles dans le nouveau canal
        await canal.send({ embeds: [createRulesEmbed()] });
    }
});

// Gestion des d√©connexions
client.on('disconnect', () => {
    console.log('Bot d√©connect√©. Reconnexion...');
    client.login(token);
});

// Bot login initial
client.login(token);
